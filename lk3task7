using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace task7
{
    class Fraction
    {
        private int top;
        private int down;
        

        public int Top
        {
            get { return top; }
            set { top = value; }    
        }

        public int Down
        {
            get { return down; }
            set { down = value; }
        }

        public Fraction(int _top, int _down)
        {
            top = _top;
            down = _down;
        }

        public static bool operator true(Fraction a)
        {
            return a.down < a.top;
        }
        public static bool operator false(Fraction a)
        {
            return a.down > a.top;
        }

        public static Fraction operator *(Fraction a, int b)
        {
            Fraction res = new Fraction(a.Top * b, a.Down);
            return res;
        }
        public static Fraction operator *(int b, Fraction a)
        {
            Fraction res = new Fraction(a.Top * b, a.Down);
            return res;
        }
        public static Fraction operator +(Fraction a, Fraction b)
        {
            int topRes = a.Top * b.Down + b.Top * a.Down;
            int downRes = a.Down * b.Down;
            Fraction res = new Fraction(topRes, downRes);
            return res;
        }
        public static Fraction operator + (Fraction a, int b)
        {
            Fraction bFraction = new Fraction(b, 1);
            Fraction res = a + bFraction;
            return res;
        }
        public static Fraction operator +(Fraction a, double b)
        {
            int bFractionDown = 1;
            while(Math.Round((decimal)b)!= (decimal)b)
            {
                bFractionDown *= 10;
                b *= 10;
            }
            Fraction bFraction = new Fraction((int)b, bFractionDown);
            Fraction res = a + bFraction;
            return res;
        }
        public static Fraction operator /(Fraction a, Fraction b)
        {
            Fraction res = new Fraction(a.top * b.down, a.down * b.top);
            return res;
        }
        public static Fraction operator -(Fraction a, Fraction b)
        {
            int topRes = a.Top * b.Down - b.Top * a.Down;
            int downRes = a.Down * b.Down;
            Fraction res = new Fraction(topRes, downRes);
            return res;
        }
        public static bool operator ==(Fraction a, Fraction b)
        {
            return (a.top == b.top && a.down == b.down);
        }
        public static bool operator !=(Fraction a, Fraction b)
        {
            return (a.top != b.top || a.down != b.down);
        }
        public static bool operator >(Fraction a, Fraction b)
        {
            return ((a - b).top > 0);
        }
        public static bool operator <(Fraction a, Fraction b)
        {
            return ((a- b).top < 0);
        }

        public override string ToString()
        {
            return string.Format("{0}/{1}", top, down);
        }
    }
}


namespace lk3task7
{
    using task7;

    class Program
    {
        static void Main(string[] args)
        {
            Fraction f = new Fraction(3, 4);
            int a = 10;
            Fraction f1 = f * a;
            Fraction f2 = a * f;
            double d = 1.5;
            Fraction f3 = f + d;
            Console.WriteLine(f3);
        }
    }
}
